---

- set_fact:
    base_url: "{{ bacula_download_url }}/{{ ansible_distribution_release }}/amd64"

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: tempfile_1
  delegate_to: localhost

# https://www.bacula.org/bacula-binary-package-download/
- name: Fetch Packages file
  ansible.builtin.get_url:
    url: "{{ base_url }}/dists/{{ ansible_distribution_release }}/main/binary-amd64/Packages"
    dest: "{{ tempfile_1.path }}"
    mode: u=r,g=r,o=
    force: yes
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Getting filenames from Package file
  ansible.builtin.shell: "cat {{ tempfile_1.path }} | grep -Eo 'dists.*\\.deb'"
  register: filenames
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Remove the temporary file
  ansible.builtin.file:
    path: "{{ tempfile_1.path }}"
    state: absent
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Create directory for debs
  ansible.builtin.file:
    path: "files/debs/"
    state: directory
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Fetching deb packages
  ansible.builtin.get_url:
    url: "{{ base_url }}/{{ item }}"
    mode: u=rx,g=rx,o=
    dest: "files/debs/{{ item | basename }}"
  loop: "{{ filenames.stdout_lines }}"
  when: filenames.rc == 0
  delegate_to: localhost

- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: bacula
  register: tempdir_1

- name: Copy debs to server
  ansible.builtin.copy:
    src: "files/debs/{{ item | basename }}"
    dest: "{{ tempdir_1.path }}/{{ item | basename }}"
    mode: '0755'
  loop: "{{ filenames.stdout_lines }}"
  when: filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-common
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-common.*\\.deb') | first | basename }}"
  when: bacula_install_common and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-console
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-console.*\\.deb') | first | basename }}"
  when: bacula_install_console and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-aligned
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-aligned.*\\.deb') | first | basename }}"
  when: bacula_install_aligned and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-client
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-client.*\\.deb') | first | basename }}"
  when: bacula_install_client and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-'+bacula_database_engine+'.*\\.deb') | first | basename }}"
  when: filenames.rc == 0 and tempdir_1.path is defined

- name: Remove the temporary directory
  ansible.builtin.file:
    path: "{{ tempdir_1.path }}"
    state: absent
  when: tempdir_1.path is defined

- name: Create a symlink /etc/bacula
  ansible.builtin.file:
    src: "{{ bacula_root }}/etc"
    dest: /etc/bacula
    owner: "{{ bacula_owner }}"
    group: "{{ bacula_group }}"
    state: link

- name: Create directory config.d/
  ansible.builtin.file:
    dest: "{{ bacula_root }}/etc/config.d/"
    owner: "{{ bacula_owner }}"
    group: "{{ bacula_group }}"
    state: directory

- name: Change permissions on /var/log/bacula/
  ansible.builtin.shell: "chown {{"
