---

- set_fact:
    base_url: "{{ bacula_download_url }}/{{ ansible_distribution_release }}/amd64"

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: tempfile_1
  delegate_to: localhost

# https://www.bacula.org/bacula-binary-package-download/
- name: Fetch Packages file
  ansible.builtin.get_url:
    url: "{{ base_url }}/dists/{{ ansible_distribution_release }}/main/binary-amd64/Packages"
    dest: "{{ tempfile_1.path }}"
    mode: u=r,g=r,o=
    force: yes
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Getting filenames from Package file
  ansible.builtin.shell: "cat {{ tempfile_1.path }} | grep -Eo 'dists.*\\.deb'"
  register: filenames
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Remove the temporary file
  ansible.builtin.file:
    path: "{{ tempfile_1.path }}"
    state: absent
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Create directory for debs
  ansible.builtin.file:
    path: "files/debs/"
    state: directory
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Fetching deb packages
  ansible.builtin.get_url:
    url: "{{ base_url }}/{{ item }}"
    mode: u=rx,g=rx,o=
    dest: "files/debs/{{ item | basename }}"
  loop: "{{ filenames.stdout_lines }}"
  when: filenames.rc == 0
  delegate_to: localhost

- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: bacula
  register: tempdir_1

- name: Copy debs to server
  ansible.builtin.copy:
    src: "files/debs/{{ item | basename }}"
    dest: "{{ tempdir_1.path }}/{{ item | basename }}"
    mode: '0755'
  loop: "{{ filenames.stdout_lines }}"
  when: filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-common
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-common.*\\.deb') | first | basename }}"
  when: bacula_install_common and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-console
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-console.*\\.deb') | first | basename }}"
  when: bacula_install_console and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-aligned
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-aligned.*\\.deb') | first | basename }}"
  when: bacula_install_aligned and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula-client
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-client.*\\.deb') | first | basename }}"
  when: bacula_install_client and filenames.rc == 0 and tempdir_1.path is defined

- name: Install bacula
  apt:
    deb: "{{ tempdir_1.path }}/{{ filenames.stdout_lines | select('match', '.*/bacula-'+bacula_database_engine+'.*\\.deb') | first | basename }}"
  when: filenames.rc == 0 and tempdir_1.path is defined

- name: Remove the temporary directory
  ansible.builtin.file:
    path: "{{ tempdir_1.path }}"
    state: absent
  when: tempdir_1.path is defined

- name: Create a symlink /etc/bacula
  ansible.builtin.file:
    src: "{{ bacula_root }}/etc"
    dest: /etc/bacula
    owner: "{{ bacula_owner }}"
    group: "{{ bacula_group }}"
    state: link

- name: Create directory config.d/
  ansible.builtin.file:
    dest: "{{ bacula_root }}/etc/config.d/"
    owner: "{{ bacula_owner }}"
    group: "{{ bacula_group }}"
    state: directory

- name: Fetch clients on group "{{ bacula_client_group }}"
  set_fact:
    dyn_clients: |
      {% set cfg = bacula__common__clients | combine(hostvars[item][bacula_client_var] | default({})) %}
      {% set pName = cfg.Name | replace('#client#', item) if cfg.Name | d() else none %}
      {% set pAddress = cfg.Address | replace('#client_fqdn#', hostvars[item]['ansible_fqdn']) if cfg.Address | d() else none %}
      {% set client_changes = { 'Name': pName, 'Address': pAddress } %}
      {% for c in client_changes | dict2items %}
      {% if (cfg.update({ c.key: c.value }) if c.value is not none else cfg) %}{% endif %}
      {% endfor %}
      {{ dyn_clients | default([]) + [ cfg ] }}
  loop: "{{ groups[bacula_client_group] }}"

- name: Fetch pools and define separate one for each client
  set_fact:
    pools: |
      {% set pName = item[0].Name | replace('#client#', item[1]) %}
      {% set pLabelFormat = item[0].LabelFormat | replace('#client#', item[1]) %}
      {{
        pools | default([]) + [item[0] | combine({ 'Name': pName, 'LabelFormat': pLabelFormat })]
      }}
  with_nested:
    - "{{ bacula_pools }}"
    - "{{ groups[bacula_client_group] }}"

- name: Fetch jobs defined on each client
  set_fact:
    dyn_jobs: |
      {{
        dyn_jobs | default([]) + hostvars[item][bacula_client_jobs_var]
          if hostvars[item][bacula_client_jobs_var] | d() else (dyn_jobs | default([]))
      }}
  loop: "{{ groups[bacula_client_group] }}"

- name: Fetch storages on group "{{ bacula_storages_group }}"
  set_fact:
    dyn_storages: |
      {{
        dyn_storages | default([]) + hostvars[item][bacula_storage_var]
          if hostvars[item][bacula_storage_var] | d() else (dyn_storages | default([]))
      }}
  loop: "{{ groups[bacula_storage_group] }}"

- name: Transform list of jobs
  set_fact:
    jobs: |
      {% set job = item[0] %}
      {% set cName = item[0].Name | replace('#client#', item[1]) if item[0].Name | d() else none %}
      {% set cFileSet = item[0].FileSet | replace('#client#', item[1]) if item[0].FileSet | d() else none %}
      {% set cJobDefs = item[0].JobDefs | replace('#client#', item[1]) if item[0].JobDefs | d() else none %}
      {% set cSchedule = item[0].Schedule | replace('#client#', item[1]) if item[0].Schedule | d() else none %}
      {% set job_changes = { 'Name': cName, 'FileSet': cFileSet, 'JobDefs': cJobDefs, 'Schedule': cSchedule } %}
      {% for c in job_changes | dict2items %}
      {% if (job.update({ c.key: c.value }) if c.value is not none else job) %}{% endif %}
      {% endfor %}
      {{ jobs | default([]) + [ job ] }}
  with_nested:
    - "{{ bacula_jobs }}"
    - "{{ groups[bacula_client_group] }}"

- name: Update configs on server
  template:
    src: resource.conf.j2
    dest: "{{ bacula_root }}/etc/{{ item.dest }}"
    owner: "{{ bacula_owner }}"
    group: "{{ bacula_group }}"
    mode: 0640
  vars:
    resource: "{{ item.resource }}"
    resource_options: "{{ item.resource_options }}"
  loop:
    - resource: Console
      resource_options: "{{ bacula_consoles }}"
      dest: "config.d/console.conf"
    - resource: Client
      resource_options: "{{ bacula_clients | default([]) + dyn_clients | default([]) if bacula__dynamic__clients else bacula_clients | default([]) }}"
      dest: "config.d/clients.conf"
    - resource: Director
      resource_options: "{{ bacula_directors }}"
      include_endline:
        - "@{{ bacula_root }}/etc/config.d/console.conf"
        - "@{{ bacula_root }}/etc/config.d/clients.conf"
        - "@{{ bacula_root }}/etc/config.d/filesets.conf"
        - "@{{ bacula_root }}/etc/config.d/jobdefs.conf"
        - "@{{ bacula_root }}/etc/config.d/messages.conf"
        - "@{{ bacula_root }}/etc/config.d/schedules.conf"
        - "@{{ bacula_root }}/etc/config.d/storages.conf"
        - "@{{ bacula_root }}/etc/config.d/pools.conf"
      dest: "bacula-dir.conf"
    - resource: FileSet
      resource_options: "{{ bacula_filesets | default([]) }}"
      dest: "config.d/filesets.conf"
    - resource: JobDef
      resource_options: "{{ bacula_jobdefs | default([]) }}"
      dest: "config.d/jobdefs.conf"
    - resource: Job
      resource_options: "{{ jobs + dyn_jobs | default([]) | default([]) if bacula__dynamic__jobs else jobs | default([]) }}"
      dest: "config.d/jobs.conf"
    - resource: Messages
      resource_options: "{{ bacula_messages | default([]) }}"
      dest: "config.d/messages.conf"
    - resource: Schedule
      resource_options: "{{ bacula_schedules | default([]) }}"
      dest: "config.d/schedules.conf"
    - resource: Storage
      resource_options: "{{ bacula_storage | default([]) + dyn_storages | default([]) if bacula__dynamic__storages else bacula_storage | default([]) }}"
      dest: "config.d/storages.conf"
    - resource: Pool
      resource_options: "{{ pools | default([]) }}"
      dest: "config.d/pools.conf"

