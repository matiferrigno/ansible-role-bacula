---

- set_fact:
    base_url: "{{ bacula_download_url }}/{{ ansible_distribution_release }}/amd64"

- name: Create temporary file
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: tempfile_1
  delegate_to: localhost

# https://www.bacula.org/bacula-binary-package-download/
- name: Fetch Packages file
  ansible.builtin.get_url:
    url: "{{ base_url }}/dists/{{ ansible_distribution_release }}/main/binary-amd64/Packages"
    dest: "{{ tempfile_1.path }}"
    mode: u=r,g=r,o=
    force: yes
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Getting bacula-client filename from Package file
  ansible.builtin.shell: "cat {{ tempfile_1.path }} | grep -Eo 'dists.*bacula-client.*\\.deb'"
  register: filename
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Remove the temporary file
  ansible.builtin.file:
    path: "{{ tempfile_1.path }}"
    state: absent
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Create directory for debs
  ansible.builtin.file:
    path: "files/debs/"
    state: directory
  when: tempfile_1.path is defined
  delegate_to: localhost

- name: Fetching deb package bacula-client
  ansible.builtin.get_url:
    url: "{{ base_url }}/{{ item }}"
    mode: u=rx,g=rx,o=
    dest: "files/debs/{{ item | basename }}"
  loop: "{{ filename.stdout_lines }}"
  when: filename.rc == 0
  delegate_to: localhost

- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: bacula
  register: tempdir_1
  delegate_to: "{{ delegate }}"

- name: Copy bacula-client.deb to server
  ansible.builtin.copy:
    src: "files/debs/{{ item | basename }}"
    dest: "{{ tempdir_1.path }}/{{ item | basename }}"
    mode: '0755'
  loop: "{{ filename.stdout_lines }}"
  when: filename.rc == 0 and tempdir_1.path is defined
  delegate_to: "{{ delegate }}"

- name: Install bacula-client
  apt:
    deb: "{{ tempdir_1.path }}/{{ filename.stdout_lines | select('match', '.*/bacula-client.*\\.deb') | first | basename }}"
  when: filename.rc == 0 and tempdir_1.path is defined
  delegate_to: "{{ delegate }}"

